package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal ADD, AND, ASSIGN, BREAK, CLASS, COLON, COMMA, CONST, CONTINUE, DEC, DIV, DOT, ELSE, EQUAL, EXTENDS, FOREACH, GR, GRE, IF, IFNULL, INC, INSTANCEOF, LBRACE, LPAREN, LS, LSQUARE, LEQ, MOD, MUL, NEQUAL, NEW, NEXT, OR, PRINT, PROG, RBRACE,READ, RETURN, RPAREN, RSQUARE, SEMI, SUB, VOID, WHILE;
nonterminal Else, If, While, ActPars, AddOpp, ArrDesignator, AssignConst, AssignDesign, Assignop, ClassDecl, CondFact, CondFactList, CondTerm, CondTermList, Condition, Const, ConstDecl, ConstructorDeclList, DeclList, DesignList, DesignatorStatement, EmptySqBrackets, ExprList, ExtendClass, FormPars, FunctionBody, IdentSqList, MethodDeclList, MulOpp, OptionalClassBody, OptionalDesign, OptionalDesignList, OptionalElse, OptionalFormPars, OptionalSquareExpr, ParamSqList, Program, RelOpp, RepeatConst, Statement, StatementList, VarDecl, VarDeclList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, MethodDecl, MethodName, Designator, ClassName, ConstructorDecl, ConstructorName, FEElem;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, MulFactorList, AddTermList;

terminal String IDENT;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;

precedence left ELSE;
start with Program;


ActPars ::= (ActPars) Expr ExprList;
AddOpp ::= (AddOp) ADD | (SubOp) SUB;
AddTermList ::= (AddTerms) AddTermList AddOpp Term | (NoAddTerm) /* epsilon */ ;
ArrDesignator ::= (ArrDesignator) Designator;
AssignConst ::= (AssignConst) IDENT Assignop Const;
AssignDesign ::= (AssignDesign) Assignop Designator;
Assignop ::= (Assignop) ASSIGN;
ClassDecl ::= (ClassDecl) ClassName ExtendClass LBRACE VarDeclList OptionalClassBody RBRACE ;
ClassName ::= (ClassName) CLASS IDENT;
CondFact ::= (CondFactBase) Expr | (CondFactRel) Expr RelOpp Expr;
CondFactList ::= (CondFacts) CondFactList CondFact AND | (NoCondFact) /* epsilon */ ;
CondTerm ::= (CondTerm) CondFactList CondFact;
CondTermList ::= (CondTerms) CondTermList  CondTerm  OR| (NoCondTerm) /* epsilon */ ;
Condition ::= (Condition)  CondTermList CondTerm;
Const ::= (IntConst) NUMBER | (CharConst) CHAR | (BoolConst) BOOL;
ConstDecl ::= (ConstDecl) CONST Type AssignConst RepeatConst SEMI;
ConstructorDeclList ::= (ConstructorDecls) ConstructorDeclList ConstructorDecl | (ConstructorSingleDecl) ConstructorDecl /* epsilon */ ;
ConstructorDecl ::= (ConstructorDecl) ConstructorName LPAREN OptionalFormPars RPAREN FunctionBody;
ConstructorName ::= (ConstructorName) IDENT;
DeclList ::= (DeclsConst) DeclList ConstDecl | (DeclsVar) DeclList VarDecl | (DeclsClass) DeclList ClassDecl | (NoDecl)/* epsilon */ ;
DesignList ::= (DesignListMulti) DesignList COMMA OptionalDesign | (NoDesignList) /* epsilon */ ;
Designator ::= (DesignatorIdent) IDENT | (DesignatorExpr) ArrDesignator LSQUARE Expr RSQUARE  | (DesignatorClassField) Designator DOT IDENT;
DesignatorStatement ::= (DesignatorStatementBase) Designator | (DesignatorStatementAssignExpr) Designator Assignop Expr | (DesignatorStatementParens) Designator LPAREN RPAREN | (DesignatorStatementActPars) Designator LPAREN ActPars RPAREN | (DesignatorStatementInc) Designator INC | (DesignatorStatementDec) Designator DEC | (DesignatorStatementListAssign) LSQUARE OptionalDesign DesignList RSQUARE AssignDesign ;
EmptySqBrackets ::= (ArrayBrackets) LSQUARE RSQUARE | (NotArray) /* epsilon */ ;
Expr ::= (ExprBase) Term AddTermList | (ExprSub) SUB Term AddTermList;
ExprList ::= (Exprs) ExprList COMMA Expr | (NoExpr) /* epsiolon*/;
ExtendClass ::= (ParentClass) EXTENDS Type | (NoParent) /* epsilon */ ;
Factor ::= (FactorBase) Designator | (FactorParen) Designator LPAREN RPAREN | (FactorActPars) Designator LPAREN ActPars RPAREN | (FactorNumber) NUMBER | (FactorChar) CHAR | (FactorBool) BOOL | (FactorNewSquare) NEW Type LSQUARE Expr RSQUARE | (FactorNewParen) NEW Type LPAREN RPAREN | (FactorNewActPars) NEW Type LPAREN ActPars RPAREN | (FactorParensExpr) LPAREN Expr RPAREN;
FEElem ::= (FEElem) IDENT;
FormPars ::= (FormPars) Type IDENT EmptySqBrackets ParamSqList;
FunctionBody ::= VarDeclList LBRACE StatementList RBRACE;
IdentSqList ::= (ArrayVar) IdentSqList COMMA IDENT EmptySqBrackets | (NotIdentArray) /* epsilon */ ;
If ::= (If) IF;
Else ::= (Else) ELSE;
MethodDecl ::= MethodName LPAREN OptionalFormPars RPAREN FunctionBody;
MethodDeclList ::= (MethDecls) MethodDeclList MethodDecl | (NoMethDecl)/* epsilon */ ;
MethodName ::= (MethodNameVoid) VOID IDENT | (MethodNameType) Type IDENT;
MulFactorList ::= (MulFactors) MulFactorList MulOpp Factor | (NoMulFactor) /* epsilon */ ;
MulOpp ::= (MulOp) MUL | (DivOp) DIV | (ModOp) MOD;
OptionalClassBody ::= (ClassBodyEmpty) LBRACE RBRACE | (ClassBodyConstr) LBRACE ConstructorDeclList RBRACE | (ClassBodyMeth) LBRACE MethodDecl MethodDeclList RBRACE | (ClassBodyConstrMeth) LBRACE ConstructorDeclList MethodDecl MethodDeclList RBRACE;
OptionalDesign ::= (DesignatorArr) Designator | (NoDesignatorArr) ;
OptionalElse ::= (StatementElse) Else Statement | (NoElse) /* epsilon */ ;
OptionalFormPars ::= (OptFormPars) FormPars | (NoFormPars) /* epsilon */ ;
ParamSqList ::= (ArrayParam) ParamSqList COMMA Type IDENT EmptySqBrackets | (NotParamArray) /* epsilon */ ;
Program ::= (Program) ProgName DeclList LBRACE MethodDeclList RBRACE;
ProgName ::= (ProgName) PROG IDENT;
RelOpp ::= (EqOp) EQUAL | (NeqOp) NEQUAL | (GreOp) GRE | (LeqOp) LEQ | (GrOp) GR | (LsOp) LS;
RepeatConst ::= (NewRepeatConst) RepeatConst COMMA AssignConst | (NoRepeatConst) /*epsion */;
Statement ::= (StatementDesignator) DesignatorStatement SEMI | (StatementIfElse) If LPAREN Condition RPAREN Statement OptionalElse | (StatementWhile) While LPAREN Condition RPAREN Statement | (StatementBreak) BREAK SEMI | (StatementContinue) CONTINUE SEMI | (StatementReturnVoid) RETURN SEMI | (StatementReturnExpr) RETURN Expr SEMI | (StatementRead) READ LPAREN Designator RPAREN SEMI | (StatementPrintExpr) PRINT LPAREN Expr RPAREN SEMI | (StatementPrintExprNumber) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI |  (StatementBlock) LBRACE StatementList RBRACE | (StatementForeach) Designator DOT FOREACH LPAREN FEElem NEXT Statement RPAREN SEMI;
StatementList ::= (Statements) StatementList Statement | (NoStatement) /* epsilon */ ;
Term ::= (Term) Factor MulFactorList;
Type ::= (Type) IDENT;
VarDecl ::= (VarDecl) Type IDENT EmptySqBrackets IdentSqList SEMI;
VarDeclList ::= (VarDecls) VarDeclList VarDecl | (NoVarDecl)/* epsilon */ ;
While ::= (While) WHILE;