package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal ADD, AND, ASSIGN, BREAK, CLASS, COLON, COMMA, CONST, CONTINUE, DEC, DIV, DOT, ELSE, EQUAL, EXTENDS, FOREACH, GR, GRE, IF, IFNULL, INC, INSTANCEOF, LBRACE, LPAREN, LS, LSQUARE, LEQ, MOD, MUL, NEQUAL, NEW, NEXT, OR, PRINT, PROG, RBRACE,READ, RETURN, RPAREN, RSQUARE, SEMI, SUB, VOID, WHILE;
nonterminal If If;
nonterminal While While;
nonterminal ActPars ActPars;
nonterminal AddOpp AddOpp;
nonterminal ArrDesignator ArrDesignator;
nonterminal AssignConst AssignConst;
nonterminal AssignDesign AssignDesign;
nonterminal Assignop Assignop;
nonterminal ClassDecl ClassDecl;
nonterminal CondFact CondFact;
nonterminal CondFactList CondFactList;
nonterminal CondTerm CondTerm;
nonterminal CondTermList CondTermList;
nonterminal Condition Condition;
nonterminal Const Const;
nonterminal ConstDecl ConstDecl;
nonterminal ConstructorDeclList ConstructorDeclList;
nonterminal DeclList DeclList;
nonterminal DesignList DesignList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal EmptySqBrackets EmptySqBrackets;
nonterminal ExprList ExprList;
nonterminal ExtendClass ExtendClass;
nonterminal FormPars FormPars;
nonterminal FunctionBody FunctionBody;
nonterminal IdentSqList IdentSqList;
nonterminal MethodDeclList MethodDeclList;
nonterminal MulOpp MulOpp;
nonterminal OptionalClassBody OptionalClassBody;
nonterminal OptionalDesign OptionalDesign;
nonterminal OptionalDesignList OptionalDesignList;
nonterminal OptionalElse OptionalElse;
nonterminal OptionalFormPars OptionalFormPars;
nonterminal OptionalSquareExpr OptionalSquareExpr;
nonterminal ParamSqList ParamSqList;
nonterminal Program Program;
nonterminal RelOpp RelOpp;
nonterminal RepeatConst RepeatConst;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, MethodDecl, MethodName, Designator, ClassName, ConstructorDecl, ConstructorName, FEElem;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, MulFactorList, AddTermList;

terminal String IDENT;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;

precedence left ELSE;
start with Program;


ActPars ::= (ActPars) Expr:E1 ExprList:E2 {: RESULT=new ActPars(E1, E2); RESULT.setLine(E1left); :};
AddOpp ::= (AddOp) ADD {: RESULT=new AddOp(); :} | (SubOp) SUB {: RESULT=new SubOp(); :};
AddTermList ::= (AddTerms) AddTermList:A1 AddOpp:A2 Term:T3 {: RESULT=new AddTerms(A1, A2, T3); RESULT.setLine(A1left); :} | (NoAddTerm) {: RESULT=new NoAddTerm(); :} /* epsilon */ ;
AssignConst ::= (AssignConst) IDENT:I1 Assignop:A2 Const:C3 {: RESULT=new AssignConst(I1, A2, C3); RESULT.setLine(I1left); :};
AssignDesign ::= (AssignDesign) Assignop:A1 Designator:D2 {: RESULT=new AssignDesign(A1, D2); RESULT.setLine(A1left); :};
Assignop ::= (Assignop) ASSIGN {: RESULT=new Assignop(); :};
ClassDecl ::= (ClassDecl) ClassName:C1 ExtendClass:E2 LBRACE VarDeclList:V3 OptionalClassBody:O4 RBRACE {: RESULT=new ClassDecl(C1, E2, V3, O4); RESULT.setLine(C1left); :} ;
ClassName ::= (ClassName) CLASS IDENT:I1 {: RESULT=new ClassName(I1); RESULT.setLine(I1left); :};
CondFact ::= (CondFactBase) Expr:E1 {: RESULT=new CondFactBase(E1); RESULT.setLine(E1left); :} | (CondFactRel) Expr:E1 RelOpp:R2 Expr:E3 {: RESULT=new CondFactRel(E1, R2, E3); RESULT.setLine(E1left); :};
CondFactList ::= (CondFacts) CondFactList:C1 AND CondFact:C2 {: RESULT=new CondFacts(C1, C2); RESULT.setLine(C1left); :} | (NoCondFact) {: RESULT=new NoCondFact(); :} /* epsilon */ ;
CondTerm ::= (CondTerm) CondFact:C1 CondFactList:C2 {: RESULT=new CondTerm(C1, C2); RESULT.setLine(C1left); :};
CondTermList ::= (CondTerms) CondTermList:C1 OR CondTerm:C2 {: RESULT=new CondTerms(C1, C2); RESULT.setLine(C1left); :} | (NoCondTerm) {: RESULT=new NoCondTerm(); :} /* epsilon */ ;
Condition ::= (Condition) CondTerm:C1 CondTermList:C2 {: RESULT=new Condition(C1, C2); RESULT.setLine(C1left); :};
Const ::= (IntConst) NUMBER:N1 {: RESULT=new IntConst(N1); RESULT.setLine(N1left); :} | (CharConst) CHAR:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :} | (BoolConst) BOOL:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :};
ConstDecl ::= (ConstDecl) CONST Type:T1 AssignConst:A2 RepeatConst:R3 SEMI {: RESULT=new ConstDecl(T1, A2, R3); RESULT.setLine(T1left); :};
ConstructorDeclList ::= (ConstructorDecls) ConstructorDeclList:C1 ConstructorDecl:C2 {: RESULT=new ConstructorDecls(C1, C2); RESULT.setLine(C1left); :} | (ConstructorSingleDecl) ConstructorDecl:C1 {: RESULT=new ConstructorSingleDecl(C1); RESULT.setLine(C1left); :} /* epsilon */ ;
ConstructorDecl ::= (ConstructorDecl) ConstructorName:C1 LPAREN OptionalFormPars:O2 RPAREN FunctionBody:F3 {: RESULT=new ConstructorDecl(C1, O2, F3); RESULT.setLine(C1left); :};
ConstructorName ::= (ConstructorName) IDENT:I1 {: RESULT=new ConstructorName(I1); RESULT.setLine(I1left); :};
DeclList ::= (DeclsConst) DeclList:D1 ConstDecl:C2 {: RESULT=new DeclsConst(D1, C2); RESULT.setLine(D1left); :} | (DeclsVar) DeclList:D1 VarDecl:V2 {: RESULT=new DeclsVar(D1, V2); RESULT.setLine(D1left); :} | (DeclsClass) DeclList:D1 ClassDecl:C2 {: RESULT=new DeclsClass(D1, C2); RESULT.setLine(D1left); :} | (NoDecl) {: RESULT=new NoDecl(); :}/* epsilon */ ;
DesignList ::= (DesignListMulti) DesignList:D1 COMMA OptionalDesign:O2 {: RESULT=new DesignListMulti(D1, O2); RESULT.setLine(D1left); :} | (NoDesignList) {: RESULT=new NoDesignList(); :} /* epsilon */ ;
Designator ::= (DesignatorIdent) IDENT:I1 {: RESULT=new DesignatorIdent(I1); RESULT.setLine(I1left); :} | (DesignatorExpr) ArrDesignator:A1 LSQUARE Expr:E2 RSQUARE {: RESULT=new DesignatorExpr(A1, E2); RESULT.setLine(A1left); :}  | (DesignatorClassField) Designator:D1 DOT IDENT:I2 {: RESULT=new DesignatorClassField(D1, I2); RESULT.setLine(D1left); :};
DesignatorStatement ::= (DesignatorStatementBase) Designator:D1 {: RESULT=new DesignatorStatementBase(D1); RESULT.setLine(D1left); :} | (DesignatorStatementAssignExpr) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorStatementAssignExpr(D1, A2, E3); RESULT.setLine(D1left); :} | (DesignatorStatementParens) Designator:D1 LPAREN RPAREN {: RESULT=new DesignatorStatementParens(D1); RESULT.setLine(D1left); :} | (DesignatorStatementActPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorStatementActPars(D1, A2); RESULT.setLine(D1left); :} | (DesignatorStatementInc) Designator:D1 INC {: RESULT=new DesignatorStatementInc(D1); RESULT.setLine(D1left); :} | (DesignatorStatementDec) Designator:D1 DEC {: RESULT=new DesignatorStatementDec(D1); RESULT.setLine(D1left); :} | (DesignatorStatementListAssign) LSQUARE OptionalDesign:O1 DesignList:D2 RSQUARE AssignDesign:A3 {: RESULT=new DesignatorStatementListAssign(O1, D2, A3); RESULT.setLine(O1left); :} ;
EmptySqBrackets ::= (ArrayBrackets) LSQUARE RSQUARE {: RESULT=new ArrayBrackets(); :} | (NotArray) {: RESULT=new NotArray(); :} /* epsilon */ ;
Expr ::= (ExprBase) Term:T1 AddTermList:A2 {: RESULT=new ExprBase(T1, A2); RESULT.setLine(T1left); :} | (ExprSub) SUB Term:T1 AddTermList:A2 {: RESULT=new ExprSub(T1, A2); RESULT.setLine(T1left); :};
ExprList ::= (Exprs) ExprList:E1 COMMA Expr:E2 {: RESULT=new Exprs(E1, E2); RESULT.setLine(E1left); :} | (NoExpr) {: RESULT=new NoExpr(); :} /* epsiolon*/;
ExtendClass ::= (ParentClass) EXTENDS Type:T1 {: RESULT=new ParentClass(T1); RESULT.setLine(T1left); :} | (NoParent) {: RESULT=new NoParent(); :} /* epsilon */ ;
Factor ::= (FactorBase) Designator:D1 {: RESULT=new FactorBase(D1); RESULT.setLine(D1left); :} | (FactorParen) Designator:D1 LPAREN RPAREN {: RESULT=new FactorParen(D1); RESULT.setLine(D1left); :} | (FactorActPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorActPars(D1, A2); RESULT.setLine(D1left); :} | (FactorNumber) NUMBER:N1 {: RESULT=new FactorNumber(N1); RESULT.setLine(N1left); :} | (FactorChar) CHAR:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :} | (FactorBool) BOOL:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :} | (FactorNewSquare) NEW Type:T1 LSQUARE Expr:E2 RSQUARE {: RESULT=new FactorNewSquare(T1, E2); RESULT.setLine(T1left); :} | (FactorNewParen) NEW Type:T1 LPAREN RPAREN {: RESULT=new FactorNewParen(T1); RESULT.setLine(T1left); :} | (FactorNewActPars) NEW Type:T1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorNewActPars(T1, A2); RESULT.setLine(T1left); :} | (FactorParensExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorParensExpr(E1); RESULT.setLine(E1left); :};
FEElem ::= (FEElem) IDENT:I1 {: RESULT=new FEElem(I1); RESULT.setLine(I1left); :};
ArrDesignator ::= (ArrDesignator) Designator:D1 {: RESULT=new ArrDesignator(D1); RESULT.setLine(D1left); :};
FormPars ::= (FormPars) Type:T1 IDENT:I2 EmptySqBrackets:E3 ParamSqList:P4 {: RESULT=new FormPars(T1, I2, E3, P4); RESULT.setLine(T1left); :};
FunctionBody ::= VarDeclList:V1 LBRACE StatementList:S2 RBRACE {: RESULT=new FunctionBodyDerived1(V1, S2); RESULT.setLine(V1left); :};
IdentSqList ::= (ArrayVar) IdentSqList:I1 COMMA IDENT:I2 EmptySqBrackets:E3 {: RESULT=new ArrayVar(I1, I2, E3); RESULT.setLine(I1left); :} | (NotIdentArray) {: RESULT=new NotIdentArray(); :} /* epsilon */ ;
If ::= (If) IF {: RESULT=new If(); :};
MethodDecl ::= MethodName:M1 LPAREN OptionalFormPars:O2 RPAREN FunctionBody:F3 {: RESULT=new MethodDeclDerived1(M1, O2, F3); RESULT.setLine(M1left); :};
MethodDeclList ::= (MethDecls) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethDecls(M1, M2); RESULT.setLine(M1left); :} | (NoMethDecl) {: RESULT=new NoMethDecl(); :}/* epsilon */ ;
MethodName ::= (MethodNameVoid) VOID IDENT:I1 {: RESULT=new MethodNameVoid(I1); RESULT.setLine(I1left); :} | (MethodNameType) Type:T1 IDENT:I2 {: RESULT=new MethodNameType(T1, I2); RESULT.setLine(T1left); :};
MulFactorList ::= (MulFactors) MulFactorList:M1 MulOpp:M2 Factor:F3 {: RESULT=new MulFactors(M1, M2, F3); RESULT.setLine(M1left); :} | (NoMulFactor) {: RESULT=new NoMulFactor(); :} /* epsilon */ ;
MulOpp ::= (MulOp) MUL {: RESULT=new MulOp(); :} | (DivOp) DIV {: RESULT=new DivOp(); :} | (ModOp) MOD {: RESULT=new ModOp(); :};
OptionalClassBody ::= (ClassBodyEmpty) LBRACE RBRACE {: RESULT=new ClassBodyEmpty(); :} | (ClassBodyConstr) LBRACE ConstructorDeclList:C1 RBRACE {: RESULT=new ClassBodyConstr(C1); RESULT.setLine(C1left); :} | (ClassBodyMeth) LBRACE MethodDecl:M1 MethodDeclList:M2 RBRACE {: RESULT=new ClassBodyMeth(M1, M2); RESULT.setLine(M1left); :} | (ClassBodyConstrMeth) LBRACE ConstructorDeclList:C1 MethodDecl:M2 MethodDeclList:M3 RBRACE {: RESULT=new ClassBodyConstrMeth(C1, M2, M3); RESULT.setLine(C1left); :};
OptionalDesign ::= (DesignatorArr) Designator:D1 {: RESULT=new DesignatorArr(D1); RESULT.setLine(D1left); :} | (NoDesignatorArr) {: RESULT=new NoDesignatorArr(); :} ;
OptionalElse ::= (Else) ELSE Statement:S1 {: RESULT=new Else(S1); RESULT.setLine(S1left); :} | (NoElse) {: RESULT=new NoElse(); :} /* epsilon */ ;
OptionalFormPars ::= (OptFormPars) FormPars:F1 {: RESULT=new OptFormPars(F1); RESULT.setLine(F1left); :} | (NoFormPars) {: RESULT=new NoFormPars(); :} /* epsilon */ ;
ParamSqList ::= (ArrayParam) ParamSqList:P1 COMMA Type:T2 IDENT:I3 EmptySqBrackets:E4 {: RESULT=new ArrayParam(P1, T2, I3, E4); RESULT.setLine(P1left); :} | (NotParamArray) {: RESULT=new NotParamArray(); :} /* epsilon */ ;
Program ::= (Program) ProgName:P1 DeclList:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};
ProgName ::= (ProgName) PROG IDENT:I1 {: RESULT=new ProgName(I1); RESULT.setLine(I1left); :};
RelOpp ::= (EqOp) EQUAL {: RESULT=new EqOp(); :} | (NeqOp) NEQUAL {: RESULT=new NeqOp(); :} | (GreOp) GRE {: RESULT=new GreOp(); :} | (LeqOp) LEQ {: RESULT=new LeqOp(); :} | (GrOp) GR {: RESULT=new GrOp(); :} | (LsOp) LS {: RESULT=new LsOp(); :};
RepeatConst ::= (NewRepeatConst) RepeatConst:R1 COMMA AssignConst:A2 {: RESULT=new NewRepeatConst(R1, A2); RESULT.setLine(R1left); :} | (NoRepeatConst) {: RESULT=new NoRepeatConst(); :} /*epsion */;
Statement ::= (StatementDesignator) DesignatorStatement:D1 SEMI {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :} | (StatementIfElse) If:I1 LPAREN Condition:C2 RPAREN Statement:S3 OptionalElse:O4 {: RESULT=new StatementIfElse(I1, C2, S3, O4); RESULT.setLine(I1left); :} | (StatementWhile) While:W1 LPAREN Condition:C2 RPAREN Statement:S3 {: RESULT=new StatementWhile(W1, C2, S3); RESULT.setLine(W1left); :} | (StatementBreak) BREAK SEMI {: RESULT=new StatementBreak(); :} | (StatementContinue) CONTINUE SEMI {: RESULT=new StatementContinue(); :} | (StatementReturnVoid) RETURN SEMI {: RESULT=new StatementReturnVoid(); :} | (StatementReturnExpr) RETURN Expr:E1 SEMI {: RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); :} | (StatementRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :} | (StatementPrintExpr) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new StatementPrintExpr(E1); RESULT.setLine(E1left); :} | (StatementPrintExprNumber) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new StatementPrintExprNumber(E1, N2); RESULT.setLine(E1left); :} |  (StatementBlock) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementBlock(S1); RESULT.setLine(S1left); :} | (StatementForeach) Designator:D1 DOT FOREACH LPAREN FEElem:F2 NEXT Statement:S3 RPAREN SEMI {: RESULT=new StatementForeach(D1, F2, S3); RESULT.setLine(D1left); :};
StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} | (NoStatement) {: RESULT=new NoStatement(); :} /* epsilon */ ;
Term ::= (Term) Factor:F1 MulFactorList:M2 {: RESULT=new Term(F1, M2); RESULT.setLine(F1left); :};
Type ::= (Type) IDENT:I1 {: RESULT=new Type(I1); RESULT.setLine(I1left); :};
VarDecl ::= (VarDecl) Type:T1 IDENT:I2 EmptySqBrackets:E3 IdentSqList:I4 SEMI {: RESULT=new VarDecl(T1, I2, E3, I4); RESULT.setLine(T1left); :};
VarDeclList ::= (VarDecls) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDecls(V1, V2); RESULT.setLine(V1left); :} | (NoVarDecl) {: RESULT=new NoVarDecl(); :}/* epsilon */ ;
While ::= (While) WHILE {: RESULT=new While(); :};